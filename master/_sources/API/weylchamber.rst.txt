
:autogenerated:

weylchamber package
===================

.. automodule:: weylchamber
    


    Submodules:

    .. toctree::
       :maxdepth: 1

       weylchamber.coordinates
       weylchamber.gates
       weylchamber.local_invariants
       weylchamber.perfect_entanglers
       weylchamber.prec
       weylchamber.visualize



    Summary
    -------

    ``__all__`` Classes:


    .. list-table::
    
       * - :class:`WeylChamber <weylchamber.visualize.WeylChamber>`
         - Class for plotting data in the Weyl Chamber
    

    ``__all__`` Functions:


    .. list-table::
    
       * - :func:`F_PE <weylchamber.perfect_entanglers.F_PE>`
         - Evaluate the Perfect-Entangler Functional
       * - :func:`J_T_LI <weylchamber.local_invariants.J_T_LI>`
         - Calculate value of the local-invariants functional
       * - :func:`bell_basis <weylchamber.gates.bell_basis>`
         - Two-qubit Bell basis associated with the given canonical basis
       * - :func:`c1c2c3 <weylchamber.coordinates.c1c2c3>`
         - Calculate Weyl chamber coordinates $(c_1, c_2, c_3)$
       * - :func:`canonical_gate <weylchamber.coordinates.canonical_gate>`
         - Return the canonical gate for the given $(c_1, c_2, c_3)$
       * - :func:`closest_LI <weylchamber.local_invariants.closest_LI>`
         - Find the closest gate that has the given Weyl chamber coordinates
       * - :func:`concurrence <weylchamber.perfect_entanglers.concurrence>`
         - Calculate the concurrence directly from the Weyl Chamber coordinates
       * - :func:`from_magic <weylchamber.coordinates.from_magic>`
         - The inverse of :func:`.to_magic`
       * - :func:`g1g2g3 <weylchamber.local_invariants.g1g2g3>`
         - Calculate local invariants $(g_1, g_3, g_3)$
       * - :func:`g1g2g3_from_c1c2c3 <weylchamber.local_invariants.g1g2g3_from_c1c2c3>`
         - Calculate local invariants from the Weyl chamber coordinates
       * - :func:`gate <weylchamber.gates.gate>`
         - Two-qubit gate that maps `basis` to `states`
       * - :func:`mapped_basis <weylchamber.gates.mapped_basis>`
         - Result of applying `gate` to `basis`
       * - :func:`point_in_region <weylchamber.coordinates.point_in_region>`
         - Check if $(c_1, c_2, c_3)$ are in the given region of the Weyl chamber
       * - :func:`point_in_weyl_chamber <weylchamber.coordinates.point_in_weyl_chamber>`
         - Check if the coordinates $(c_1, c_2, c_3)$ are inside the Weyl chamber
       * - :func:`project_to_PE <weylchamber.perfect_entanglers.project_to_PE>`
         - Project onto the boundary surface of the perfect entanglers
       * - :func:`random_gate <weylchamber.coordinates.random_gate>`
         - Return a random two-qubit gate
       * - :func:`random_weyl_point <weylchamber.coordinates.random_weyl_point>`
         - Return a random point $(c_1, c_2, c_3)$ in the Weyl chamber (units of Ï€)
       * - :func:`to_magic <weylchamber.coordinates.to_magic>`
         - Convert `A` from the canonical basis to the the "magic" Bell basis
       * - :func:`weyl_region <weylchamber.coordinates.weyl_region>`
         - Return the region of the Weyl chamber the given point is in.
    


